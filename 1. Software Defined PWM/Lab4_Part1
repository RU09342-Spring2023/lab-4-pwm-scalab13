/*
 * Part1.c
 *
 *  Created on: Feb 22, 2023
 *      Author: Brian Scala
 */

#include <msp430.h>

void gpioInit();
int main(void)
{

    WDTCTL = WDTPW | WDTHOLD;                    // Stop WDT
    // Configure GPIO
    gpioInit();
    // Disable the GPIO power-on default high-impedance mode to activate
    // previously configured port settings
    PM5CTL0 &= ~LOCKLPM5;
    // Configure Timer_A

    TB0CTL = TBSSEL__SMCLK | MC__UP | TBIE;             // SMCLK, UP mode, enable interupt
    TB0CCTL1 |= CCIE;                             // Enable TB0 CCR1 Interrupt
    TB0CCR0 = 1000;
    TB0CCR1 = 500;                          // Set CCR1 to the value to set the duty cycle
    TB0CCR2 = 500;                          //Set CCR2 to the duty cycle
    __bis_SR_register(LPM3_bits | GIE);           // Enter LPM3, enable interrupts
    __no_operation();                             // For debugger
}
// Timer0_B3 Interrupt Vector (TBIV) handler
#if defined(__TI_COMPILER_VERSION__) || defined(__IAR_SYSTEMS_ICC__)
#pragma vector=TIMER0_B1_VECTOR
__interrupt void TIMER0_B1_ISR(void)
#elif defined(__GNUC__)
void __attribute__ ((interrupt(TIMER0_B1_VECTOR))) TIMER0_B1_ISR (void)
#else
#error Compiler not supported!
#endif
{
    switch(__even_in_range(TB0IV,TB0IV_TBIFG))
    {
        case TB0IV_NONE:
            break;                               // No interrupt
        case TB0IV_TBCCR1:
            P1OUT &= ~BIT0;
            break;                               // CCR1 Set the pin to a 0
        case TB0IV_TBCCR2:
            break;                               // CCR2 not used
        case TB0IV_TBIFG:
            P1OUT |= BIT0;                       // overflow Set the pin to a 1
            P6OUT |= BIT6;                       //overflow set the pin to a 1
            break;
        default:
            break;
    }
}


void gpioInit(){
    // Configure RED LED on P1.0 as Output
    P1OUT |= BIT0;                         // Clear P1.0 output latch for a defined power-on state
    P1DIR |= BIT0;                          // Set P1.0 to output direction
    P6OUT |= BIT6;                        //Clear P6.6 output
    P6DIR |= BIT6;                     //Set P6.6 to output

    // Configure Button on P2.3 as input with pullup resistor
    P2DIR &= ~BIT3;
    P2OUT |= BIT3;                          // Configure P2.3 as pulled-up
    P2REN |= BIT3;                          // P2.3 pull-up register enable
    P2IES &= ~BIT3;                         // P2.3 Low --> High edge
    P2IE |= BIT3;                           // P2.3 interrupt enabled

    // Configure Button on P4.1 as input with pullup resistor
    P4DIR &= ~BIT3;
    P4OUT |= BIT1;                          // Configure P4.1 as pulled-up
    P4REN |= BIT1;                          // P4.1 pull-up register enable
    P4IES &= ~BIT1;                         // P4.1 Low --> High edge
    P4IE |= BIT1;                           // P4.1 interrupt enabled


}

#pragma vector=PORT2_VECTOR
__interrupt void Port_2(void)
{



    P2IFG &= ~BIT3;                            // Clear P2.3 interrupt flag
    if(TB0CCR1 >= 999)
            {
             TB0CCR1 = 30; //Set brightness close to zero
            }
            else {
                TB0CCR1 += 100;  //Increment brightness by 10%
            }



}


 //Port 4 interrupt service routine
#pragma vector=PORT4_VECTOR
__interrupt void Port_4(void)
{

     P2IFG &= ~BIT3;                            // Clear P4.1 interrupt flag
     if(TB0CCR2 >= 999)
             {
              TB0CCR2 = 30; //Set brightness close to zero
             }
             else {
                 TB0CCR2 += 100;  //Increment brightness by 10%
             }
}



